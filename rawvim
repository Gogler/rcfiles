"=================================
"============ SETTINGS
"=================================
if has("wildmenu")
set wildmenu
"set wildmode=list
" Ignore stuff (for TAB autocompletion)
set wildignore+=*.a,*.o
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
set wildignore+=.DS_Store,.git,.hg,.svn
set wildignore+=*~,*.swp,*.tmp
endif

colorscheme desert
syntax on
set ff=unix             " Unix-style endings
"set lazyredraw          " redraw only when need to.
set showmatch           " highlight matching [{()}]
set hlsearch
set ruler
set cmdheight=2
set laststatus=2
set showcmd
set nu
set rnu

set cursorline          " highlight current line
"set cursorcolumn          " highlight current line

filetype indent on      " load filetype-specific indent files
set shiftwidth=4
set tabstop=4
set softtabstop=4

"set autoindent
set expandtab
set smartindent
set cindent

set novisualbell        " don't blink

" search settings
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
set ignorecase " do case insensitive search...
set smartcase " ...unless capital letters are used

set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max
set foldmethod=indent   " fold based on indent level

set mouse=

set nobackup       "no backup files
set nowritebackup  "only in case you don't want a backup file while editing
set noswapfile     "no swap files

"autocmd BufWritePre * :%s/\s\+$//e  "Automatically rmoving all trailing whitespace when :w command

" KEYBINDS
" Force saving files that require root permission
cnoremap w!! w !sudo tee > /dev/null %

" select all
map <Leader>a ggVG

" jk is escape
imap jk <esc>

" select all
map <Leader>a ggVG

" space open/closes folds
nnoremap <space> za

"map <C-T> :tabnew<CR>

" <Leader>Enter enter new line in normal mode
nnoremap <silent> <Leader><CR> :put=''<CR>

" tab navigation
map <s-l> :tabnext<cr>
map <s-h> :tabprevious<cr>

" save as sudo
cmap w!! w  !sudo tee > /dev/null %

" clear serach with <Leader>h
noremap <silent><Leader>h :nohls<CR>

"noremap <left> :bp<CR>
"noremap <right> :bn<CR>
" list all open buffers with Leader b
nmap <leader>b :ls<CR>:buffer<Space>

nnoremap <leader>p p
nnoremap <leader>P P

nnoremap p p'[v']=
nnoremap P P'[v']=

" Open a Quickfix window for the last searchk
nnoremap <silent> <leader>/ :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>

" use <Leader>] to jump to tag in a vertical split
nnoremap <silent> <Leader>] :let word=expand("<cword>")<CR>:sp<CR>:wincmd w<cr>:exec("tag ". word)<cr>

" use <Leader>] to jump to tag in a tab split
nnoremap <silent><Leader><C-]> :tabnew %<CR>g<C-]>

" use <Leader>gf to go to file in a vertical split
nnoremap <silent> <Leader>gf :botright wincmd f<CR>

map <F6> :execute "vimgrep /" . expand("<cword>") . "/j **" <Bar> cw<CR>

"nmap <Down> :m .+1<CR>==
"nmap <Up> :m .-2<CR>==

"=================================
"============ Execute current file
"=================================
nnoremap <F5> :call ExecuteFile()<CR>
" Will attempt to execute the current file based on the `&filetype`
" You need to manually map the filetypes you use most commonly to the
    " correct shell command.
function! ExecuteFile()
    let filetype_to_command = {
        \   'javascript': 'node',
        \   'coffee': 'coffee',
        \   'python': 'python',
        \   'html': 'open',
        \   'sh': 'sh'
            \ }
let cmd = get(filetype_to_command, &filetype, &filetype)
    call RunShellCommand(cmd." %s")
    endfunction

    command! -complete=shellcmd -nargs=+ Shell call RunShellCommand(<q-args>)
function! RunShellCommand(cmdline)
    echo a:cmdline
    let expanded_cmdline = a:cmdline
    for part in split(a:cmdline, ' ')
    if part[0] =~ '\v[%#<]'
let expanded_part = fnameescape(expand(part))
    let expanded_cmdline = substitute(expanded_cmdline, part, expanded_part, '')
    endif
    endfor
    botright new
    setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile
    call setline(1, 'You entered:    ' . a:cmdline)
    call setline(2, 'Expanded Form: ' .expanded_cmdline)
    call setline(3,substitute(getline(2),'.','=','g'))
    execute '$read !'.  expanded_cmdline
    execute "resize 20"
    setlocal nomodifiable
    1
    endfunction


    "=================================
    "============ autocmd and functions
    "=================================
    " CLEAN commadn clean all trailing whatespaces
    command! CLEAN retab | %s/ \+$//

    " absolute line numbers in insert mode, relative otherwise for easy movement
    autocmd InsertEnter * :set nornu
    autocmd InsertLeave * :set rnu

    " Highlight any trailing whitespaces
    highlight WhitespaceEOL ctermbg=Red guibg=Red
    match WhitespaceEOL /\s\+$/

    " If there is no plugisn use SuperTab
function! SuperTab()
    if (strpart(getline('.'),col('.')-2,1)=~'^\W\?$')
        return "\<Tab>"
    else
        return "\<C-n>"
    endif
    endfunction
imap <Tab> <C-R>=SuperTab()<CR>

    " Higlight the max witdh of text
    if exists('+colorcolumn')
    set colorcolumn=80
    else
    au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
    endif

    " Set status line
    set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]

    " Turn on spell cheking and autoinsert mode when commitign
    if has('autocmd')
    if has('spell')
    au BufNewFile,BufRead COMMIT_EDITMSG setlocal spell
    endif
    au BufNewFile,BufRead COMMIT_EDITMSG call feedkeys('ggi', 't')
    endif

    cnoremap rt !ts b `pwd`/% <CR>
